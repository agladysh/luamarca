#!/usr/bin/env lua5.1

--------------------------------------------------------------------------------
-- luamarca: benchmarking utillity
-- This file is a part of luamarca library
-- Copyright (c) luamarca authors (see file `COPYRIGHT` for the license)
--------------------------------------------------------------------------------

require "lua-nucleo"

local parse_arguments
      = import 'luamarca/cli.lua'
      {
        'parse_arguments'
      }

local tserialize = import 'lua-nucleo/tserialize.lua' { 'tserialize' }

local ordered_pairs = import 'lua-nucleo/tdeepequals.lua' { 'ordered_pairs' }

local split_by_char
      = import 'lua-nucleo/string.lua'
      {
        'split_by_char'
      }

local shell_read
      = import 'lua-aplicado/shell.lua'
      { 
        'shell_read' 
      }

--------------------------------------------------------------------------------

local format
      = import 'luamarca/formatter.lua'
      {
        'format'
      }

local load_benchmark
      = import 'luamarca/benchmark.lua'
      {
        'load_benchmark'
      }

--------------------------------------------------------------------------------

local TOOL_NAME = "luamarca"

local CONFIG = parse_arguments(TOOL_NAME, ...)

local KNOWN_EXECUTABLES = { "lua5.1", "lua5.2", "luajit -O", "luajit2" }

--------------------------------------------------------------------------------

local find_available_interpreters = function()
  local interpreters = { }

  for i = 1, #KNOWN_EXECUTABLES do
    local command = KNOWN_EXECUTABLES[i]
    local args = split_by_char(command, " ")

    if pcall(shell_read, "command", "-v", args[1]) then
      -- Lua 5.0 and 5.1 prints version to STDERR instead of STDOUT
      local res, name = pcall(shell_read, args[1], "-v", "2>&1")

      if res then
        -- Preserve original version if it cannot be parsed
        local ver = name:match("(%w+ [%w%p]+)")
        if ver then
          name = ver
        end

        interpreters[#interpreters + 1] = 
        {
          name = name .. " (" .. command .. ")";
          command = args;
        }
      end
    end
  end

  return interpreters
end

do
  if CONFIG[TOOL_NAME].info then
    local benchmark, err = load_benchmark(CONFIG[TOOL_NAME].benchmark_file)

    if not benchmark then
      io.stderr:write(err, "\n")
      os.exit(0)
    end

    for method, _ in ordered_pairs(benchmark.handlers) do
      io.write("* ", method, "\n")
    end

    os.exit(0)
  end

  -- Execute benchmark for each interpreter in separate process
  local interpreters = find_available_interpreters()
  local results = { }
  for i = 1, #interpreters do
    local cmd = interpreters[i]

    local script = [[
      require "lua-nucleo"
      local tserialize = import "lua-nucleo/tserialize.lua" { "tserialize" }
      local load_benchmark = import "luamarca/benchmark.lua" { "load_benchmark" }

      local filename = "]] .. CONFIG[TOOL_NAME].benchmark_file .. [["

      local benchmark, err = load_benchmark(filename)
      if not benchmark then
        io.stderr:write(err, "\n")
        os.exit(0)
      end      
    ]]

    local methods = CONFIG[TOOL_NAME].methods
    if methods then
      script = script .. 'benchmark.methods = "' .. CONFIG[TOOL_NAME].methods .. '"\n'
    end

    script = script .. [[
      local res, err = benchmark:execute(]] .. CONFIG[TOOL_NAME].iterations .. [[)

      if res then
        print(tserialize(res))
      else
        print(err)
      end
    ]]

    local args = cmd.command
    args[#args + 1] = '-e'
    args[#args + 1] = script

    local ok, response = pcall(shell_read, unpack(args))

    local response_function = loadstring(response, "=" .. cmd.name)
    if response_function then
      results[cmd.name] = response_function()
    else
      io.stderr:write("Cannot execute benchmark using ", cmd.name, ': ', response, "\n")
    end
  end

  format(results, CONFIG[TOOL_NAME].output)
end
